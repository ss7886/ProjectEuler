"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

https://projecteuler.net/problem=12

Solution by Sam Sanft
"""
import math


def generate_primes(n, primes=None):
    """
    Generates primes (starting from a list of known primes) up to value n.
    """
    if primes is None:
        primes = [2]

    x = primes[-1] + 2
    if x % 2 == 0:
        x -= 1

    while x < n:
        root = math.sqrt(x)
        is_prime = True
        for p in primes:
            if p > root:
                break
            if x % p == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(x)
        x += 2
    return primes


def get_prime_factorization(primes, x):
    """
    Returns the prime factorization for a natural number x
    """
    factors = {}
    for p in primes:
        count = {p: 0}
        while x % p == 0:
            x /= p
            count[p] += 1
        if count[p] > 0:
            factors.update(count)
        if x == 1:
            break

    return factors


def num_divisors(primes, x):
    """
    Returns the number of divisors of a natural number x.
    """
    count = 1
    factors = get_prime_factorization(primes, x)
    for prime, exp in factors.items():
        count *= exp + 1

    return count


def problem_12():
    triangle_number = 1
    step = 2
    magic_number = 500

    primes = [2]

    while num_divisors(primes, triangle_number) < magic_number:
        triangle_number += step
        root = math.sqrt(triangle_number)
        if primes[-1] < root:
            primes = generate_primes(math.ceil(root), primes)
        step += 1

    print(triangle_number)


if __name__ == "__main__":
    problem_12()
